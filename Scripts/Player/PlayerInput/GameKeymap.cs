//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerInput/GameKeymap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameKeymap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameKeymap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameKeymap"",
    ""maps"": [
        {
            ""name"": ""Keymap"",
            ""id"": ""351cb5b9-2536-4102-bd43-b72d03571dba"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""d17ebf62-ba56-4eb0-9efe-a24e2bf345e4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""9ecdd0df-419d-4407-b735-ae2a236a216e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""49d987a0-724c-4bdd-a6b7-1bc3f32f0755"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slide"",
                    ""type"": ""Button"",
                    ""id"": ""6ec22545-a9b8-4426-9b40-5c1fab58a857"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Edge"",
                    ""type"": ""Button"",
                    ""id"": ""a52c127d-70a5-4e3e-805c-daf4b90dcff6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""84e8267a-367b-4b27-80a7-0b0f7cd6b4c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrow"",
                    ""id"": ""ddd21bd1-cbdc-4844-84bf-8b3b480564e4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2b323843-d235-4a1d-934b-1c15ebe284d6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""17ba5c9f-25a3-4e86-93ed-59d4db315a4e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f34121de-2292-4601-bd51-480d049b9339"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cc550243-6c71-41b6-8e61-e3570ed0c646"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""653d5714-53e6-45a4-84f5-135540061e1c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a45210f3-ebe3-4658-b393-68d65cada734"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4c2fa13-31b7-45cb-a5b0-e18de3332056"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c05794f-735c-4a18-a4db-c0436311b23b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Edge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ad34ec2-2911-46ff-9e0e-73c2790376e6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Keymap
        m_Keymap = asset.FindActionMap("Keymap", throwIfNotFound: true);
        m_Keymap_Movement = m_Keymap.FindAction("Movement", throwIfNotFound: true);
        m_Keymap_Attack = m_Keymap.FindAction("Attack", throwIfNotFound: true);
        m_Keymap_Dash = m_Keymap.FindAction("Dash", throwIfNotFound: true);
        m_Keymap_Slide = m_Keymap.FindAction("Slide", throwIfNotFound: true);
        m_Keymap_Edge = m_Keymap.FindAction("Edge", throwIfNotFound: true);
        m_Keymap_Jump = m_Keymap.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keymap
    private readonly InputActionMap m_Keymap;
    private List<IKeymapActions> m_KeymapActionsCallbackInterfaces = new List<IKeymapActions>();
    private readonly InputAction m_Keymap_Movement;
    private readonly InputAction m_Keymap_Attack;
    private readonly InputAction m_Keymap_Dash;
    private readonly InputAction m_Keymap_Slide;
    private readonly InputAction m_Keymap_Edge;
    private readonly InputAction m_Keymap_Jump;
    public struct KeymapActions
    {
        private @GameKeymap m_Wrapper;
        public KeymapActions(@GameKeymap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Keymap_Movement;
        public InputAction @Attack => m_Wrapper.m_Keymap_Attack;
        public InputAction @Dash => m_Wrapper.m_Keymap_Dash;
        public InputAction @Slide => m_Wrapper.m_Keymap_Slide;
        public InputAction @Edge => m_Wrapper.m_Keymap_Edge;
        public InputAction @Jump => m_Wrapper.m_Keymap_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Keymap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeymapActions set) { return set.Get(); }
        public void AddCallbacks(IKeymapActions instance)
        {
            if (instance == null || m_Wrapper.m_KeymapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeymapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Slide.started += instance.OnSlide;
            @Slide.performed += instance.OnSlide;
            @Slide.canceled += instance.OnSlide;
            @Edge.started += instance.OnEdge;
            @Edge.performed += instance.OnEdge;
            @Edge.canceled += instance.OnEdge;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IKeymapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Slide.started -= instance.OnSlide;
            @Slide.performed -= instance.OnSlide;
            @Slide.canceled -= instance.OnSlide;
            @Edge.started -= instance.OnEdge;
            @Edge.performed -= instance.OnEdge;
            @Edge.canceled -= instance.OnEdge;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IKeymapActions instance)
        {
            if (m_Wrapper.m_KeymapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeymapActions instance)
        {
            foreach (var item in m_Wrapper.m_KeymapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeymapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeymapActions @Keymap => new KeymapActions(this);
    public interface IKeymapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnSlide(InputAction.CallbackContext context);
        void OnEdge(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
